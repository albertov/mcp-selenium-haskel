# codemcp configuration file
project_prompt = """
You MUST always obey the following rules:

You can use the 'hoogle' command to search for documentation about symbols in
any external dependency we have available. You should implement functionality
using existing dependencies when possible.

When editing cabal files, do not add version bounds to packages.

You MUST always run the 'test' command on every package you modify and fix any
errors. Do this after every edit that affects haskell code and fix errors before
proceeding.

When implementing new functions, first get the type signatures right leaving the
body as `error "function foo has not been implemented yet"`. Check with the
`test` command that everything compiles after every edit.

You MUST always run the 'lint' command on every Haskell file after every testing
your edits and fix ALL the warnings and errors it reports.

You MUST always use explicit import and export lists.

When your work is almost ready, you MUST run the 'integration-test' command make sure
everything still works. Fix it otherwise

When your work is ready, you MUST run the 'changed_files' command to get a list of all the files
that have been modified in this branch and bump the version and update the
changelog of all packages that have been modified, not the ones that have been
newly created. Do not do this if the date of the latest entry of the changelog
is "UNRELEASED". In this case, update the latest entry but do not bump the
version.

You must also scan for any `*.md` documents that may need an update to reflect
the changes done and update them.

When told to "contiue", or "continue where you left off",... use the
'branch_log' command to inspect the last commit you made and continue. I may
have left a commit after yours to help you out, inspect it and take it into
account.
"""

[commands.format]
command = ["nix", "fmt"]
doc = "Must pass the name of the haskell file that needs formatting as an argument"

[commands.integration-test]
command = ["./run_integration_tests.sh"]
doc = """
Runs the integration tests. This command does not accept arguments

The tests run with a 90 second timeout (do not change this). If you see this
command is killed then this is the reason.
"""

[commands.nix-update-materialization]
command = ["nix", "run", ".#updateMaterialization"]
doc = """
Updates the Haskell-Nix materialized derivations. Run this when haskell
dependencies change or the cabal file is update.
"""

[commands.nix-integration-test]
command = ["timeout", "90s", "nix", "run", ".#integration-tests"]
doc = """
Runs the nix integration tests. This command does not accept arguments.

The tests run with a 90 second timeout (do not change this). If you see this
command is killed then this is the reason.
"""

[commands.test]
command = ["cabal", "test"]
doc = "Accepts the name of a single package as an argument to run their specific tests"

[commands.hoogle]
command = ["./run_hoogle.sh"]
doc = """
Use Hoogle to seach symbols in available dependencies.

Before explaining the syntax of searches, we first give a list of example
searches with their meaning:

"map" Search for the text "map"
"con map" Search for the text "map" and the text "con"
"a -> a" Search for the type "a -> a"
":: a -> a" Search for the type "a -> a"
"a" Search for the text "a"
":: a" Search for the type "a"
"id :: a -> a" Search for the text "id" and the type "a -> a"
Searches can be either textual (a list of words), or by type (a type signature)
or both. A type search may optionally start with a "::" symbol. A search is
considered a text search unless it contains a combination of text and symbols,
or if it starts with (::). To search for both a type and a name, place a ::
between them, for example "undefined :: a"

Modules: Searches can be restricted to a particular module with +Module.Name, or
to avoid a module with -Module.Name. The command Module.Name.Foo is treated as
+Module.Name Foo.

Packages: Searches can be restricted to a particular package with +packagename,
or to avoid a package with -package. By default Hoogle will search a standard
set of packages.
"""

[commands.lint]
command = ["hlint"]
doc = "Run hlint on the file passed as argument to report errors"

[commands.branch_diff]
command = ["./run_branch_diff.sh"]
doc = "Show a diff of the changes in this branch against base branch"

[commands.branch_log]
command = ["./run_branch_log.sh"]
doc = "Show the log messages of the changes done in this branch"

[commands.changed_files]
command = ["./run_changed_files.sh"]
doc = "List the file names that have been changed in this branch"

[logger]
# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
verbosity = "DEBUG"
