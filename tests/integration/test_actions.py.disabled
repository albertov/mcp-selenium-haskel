import pytest
from utils.mcp_client import MCPSeleniumClient


class TestMouseKeyboardActions:
    """Test mouse and keyboard actions"""

    @pytest.mark.asyncio
    async def test_hover_action(self, mcp_client: MCPSeleniumClient, test_server):
        """Test hover/mouseover action"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/test_page.html"
        await mcp_client.navigate(url)

        # Check if hover tool is available
        tools = await mcp_client.list_tools()
        if "hover" not in tools:
            pytest.skip("hover tool not available in this implementation")

        result = await mcp_client.call_tool("hover", {
            "by": "id",
            "value": "test-button",
            "timeout": 10000
        })

        assert "error" not in result
        assert ("hover" in result.get("text", "").lower() or
                "success" in result.get("text", "").lower())

    @pytest.mark.asyncio
    async def test_double_click_action(self, mcp_client: MCPSeleniumClient, test_server):
        """Test double click action"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/test_page.html"
        await mcp_client.navigate(url)

        tools = await mcp_client.list_tools()
        if "double_click" not in tools:
            pytest.skip("double_click tool not available in this implementation")

        result = await mcp_client.call_tool("double_click", {
            "by": "id",
            "value": "test-button",
            "timeout": 10000
        })

        assert "error" not in result
        assert ("double" in result.get("text", "").lower() or
                "success" in result.get("text", "").lower())

    @pytest.mark.asyncio
    async def test_right_click_action(self, mcp_client: MCPSeleniumClient, test_server):
        """Test right click action"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/test_page.html"
        await mcp_client.navigate(url)

        tools = await mcp_client.list_tools()
        if "right_click" not in tools:
            pytest.skip("right_click tool not available in this implementation")

        result = await mcp_client.call_tool("right_click", {
            "by": "id",
            "value": "test-button",
            "timeout": 10000
        })

        assert "error" not in result
        assert ("right" in result.get("text", "").lower() or
                "context" in result.get("text", "").lower() or
                "success" in result.get("text", "").lower())

    @pytest.mark.asyncio
    async def test_press_key_action(self, mcp_client: MCPSeleniumClient, test_server):
        """Test pressing special keys"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/form_page.html"
        await mcp_client.navigate(url)

        # First click on an input to focus it
        await mcp_client.click_element("id", "username")

        tools = await mcp_client.list_tools()
        if "press_key" not in tools:
            pytest.skip("press_key tool not available in this implementation")

        # Test pressing Enter key
        result = await mcp_client.call_tool("press_key", {
            "key": "Enter"
        })

        assert "error" not in result
        assert ("key" in result.get("text", "").lower() or
                "press" in result.get("text", "").lower() or
                "success" in result.get("text", "").lower())

    @pytest.mark.asyncio
    async def test_press_key_tab(self, mcp_client: MCPSeleniumClient, test_server):
        """Test pressing Tab key for navigation"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/form_page.html"
        await mcp_client.navigate(url)

        # First click on first input to focus it
        await mcp_client.click_element("id", "username")

        tools = await mcp_client.list_tools()
        if "press_key" not in tools:
            pytest.skip("press_key tool not available in this implementation")

        # Test pressing Tab key to move to next field
        result = await mcp_client.call_tool("press_key", {
            "key": "Tab"
        })

        assert "error" not in result

    @pytest.mark.asyncio
    async def test_drag_and_drop(self, mcp_client: MCPSeleniumClient, test_server):
        """Test drag and drop action"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/test_page.html"
        await mcp_client.navigate(url)

        tools = await mcp_client.list_tools()
        if "drag_and_drop" not in tools:
            pytest.skip("drag_and_drop tool not available in this implementation")

        # For this test we'll use the same element as both source and target
        # since our test page may not have specific drag/drop elements
        result = await mcp_client.call_tool("drag_and_drop", {
            "by": "id",
            "value": "test-button",
            "targetBy": "tag",
            "targetValue": "body",
            "timeout": 10000
        })

        assert "error" not in result
        assert ("drag" in result.get("text", "").lower() or
                "drop" in result.get("text", "").lower() or
                "success" in result.get("text", "").lower())

    @pytest.mark.asyncio
    async def test_action_on_nonexistent_element(self, mcp_client: MCPSeleniumClient, test_server):
        """Test actions on non-existent elements"""
        await mcp_client.start_browser()
        url = f"{test_server.base_url}/test_page.html"
        await mcp_client.navigate(url)

        tools = await mcp_client.list_tools()

        if "hover" in tools:
            result = await mcp_client.call_tool("hover", {
                "by": "id",
                "value": "nonexistent-element",
                "timeout": 1000  # Short timeout to fail quickly
            })
            assert ("error" in result or
                    "not found" in result.get("text", "").lower())

    @pytest.mark.asyncio
    async def test_actions_without_browser(self, mcp_client: MCPSeleniumClient):
        """Test actions without starting browser"""
        tools = await mcp_client.list_tools()

        test_actions = []
        if "hover" in tools:
            test_actions.append(("hover", {"by": "id", "value": "test", "timeout": 1000}))
        if "double_click" in tools:
            test_actions.append(("double_click", {"by": "id", "value": "test", "timeout": 1000}))
        if "right_click" in tools:
            test_actions.append(("right_click", {"by": "id", "value": "test", "timeout": 1000}))
        if "press_key" in tools:
            test_actions.append(("press_key", {"key": "Enter"}))

        for action_name, args in test_actions:
            result = await mcp_client.call_tool(action_name, args)
            assert ("error" in result or
                    "no browser" in result.get("text", "").lower() or
                    "no active browser" in result.get("text", "").lower()), \
                   f"Action {action_name} should fail without browser"
